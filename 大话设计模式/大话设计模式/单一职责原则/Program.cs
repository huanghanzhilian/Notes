using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace 单一职责原则
{
    /*单一职责原则
     * 就一个类而言，应该仅有一个引起它变化的原因
     * 如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意向不到的破坏。
     */

    /*开放-封闭原则
     * 软件实体(类、模块、函数等等)应该是可以扩展，但是不可以修改的
     * 对于扩展是开放的(open for extension)
     * 对于更改是封闭的(closed for modification)
     * 模块不可能完全封闭，都会存在一些无法封闭的变化，设计人员必须对于设计的模块应该对那种变化封闭做出选择。必须先猜出最有可能发生的变化种类，然后构造抽象来隔离那些变化
     * 面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码
     */

    /*依赖倒转原则
     * 高层模块不应该依赖底层模块。两个都应该依赖抽象
     * 抽象不应该依赖细节。细节应该依赖抽象
     * 要针对接口编程，不要对现实编程
     * 依赖倒转可以说是面向对象设计的标志，编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。
     */

    /*里氏代换
     * 子类型必须能够替换掉他们的父类型
     * 由于子类型的可替换性才使得使用父类型的模块在无需修改的情况下就可以扩展
     */

    /*迪米特法则
     * 如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以用过第三者转发这个调用。
     * 在类的结构设计上，没一个类都应当尽量降低成员的访问权限
     * 迪米特法则的根本思想是强调了类之间的松耦合
     * 类之间的耦合越弱，越有利于复用，一个处于弱耦合的类被修改，不会对有关系的类造成波及
     */

    /*合成/聚合复用原则
     * 尽量使用合成/聚合，尽量不要使用类继承
     * 聚合表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分
     * 合成则是一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样
     * 优先使用对象的合成/聚合将有助于保持每个类被封装，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物
     */
    
    class Program
    {
        static void Main(string[] args)
        {

        }
    }
}
