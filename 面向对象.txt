1、 面向对象编程、UML画图、设计模式、代码重构
2、 常用ORM工具
3、  MVC,WCF,XMl, JQuery ，SQL以及性能优化
4、 FrameWork一些深入的知识
5、 高性能代码，比如静态化，MemCached等手段。
6、 最好也了解一些其他语言，比如Java，PHP等。

面向对象是为了解决系统的可维护性\可扩展性\可重用性

封装：找到变化并且把它封装起来，你就可以在不影响其它部分的情况下修改或扩展被封装的变化部分，这是所有设计模式的基础，就是封装变化，因此封装的作用，就解决了程序的可扩展性。

继承：子类继承父类，可以继承父类的方法及属性，实现了多态以及代码的重用，因此也解决了系统的重用性和扩展性，但是继承破坏了封装，因为他是对子类开放的，修改父类会导致所有子类的改变，因此继承一定程度上又破坏了系统的可扩展性，所以继承需要慎用，只有明确的IS-A关系才能使用，同时继承在在程序开发过程中重构得到的，而不是程序设计之初就使用继承，很多面向对象开发者滥用继承，结果造成后期的代码解决不了需求的变化了。因此优先使用组合，而不是继承，是面向对象开发中一个重要的经验。

多态：接口的多种不同的实现方式即为多态。接口是对行为的抽象，刚才在封装提到，找到变化部分并封装起来，但是封装起来后，怎么适应接下来的变化？这正是接口的作用，接口的主要目的是为不相关的类提供通用的处理服务,我们可以想象一下。比如鸟会飞，但是超人也会飞，通过飞这个接口，我们可以让鸟和超人，都实现这个接口，这就实现了系统的可维护性，可扩展性。 

1、首先是分析需求，先不要思考怎么用程序实现它，先分析需求中稳定不变的客体都是些什么，这些客体之间的关系是什么。
2、把第一步分析出来的需求，通过进一步扩充模型，变成可实现的、符合成本的、模块化的、低耦合高内聚的模型。
3、使用面向对象的实现模型

“面向对象”和“基于对象”都实现了“封装”的概念，但是面向对象实现了“继承和多态”，而“基于对象”没有实现这些。因此在我们进行WEB开发，普通三层开发中，基本上是基于对象的实现，因为只是实现了封装，但是没有使用继承和多态，不过这也正常，WEB开发，大部分功能就是简单的增删改查，中间的BLL层基本就是直接New一个DAL的实例就return了，关系数据库已经为我们做了很多工作，所以大部分的工作，就是简单读取然后显示了，因此没有复杂的需求的时候，基于过程也没什么不对，面向过程也没什么不对，实用是压倒一切的因素。

